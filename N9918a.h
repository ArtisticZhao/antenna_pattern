#pragma once
#include <QObject>
#include <QLineEdit>
#include <QTextEdit>
#include <QCoreApplication>
#include <QThread>
#include <QtCharts>
#include <QTelnet.h>
#include "logging.h"

QT_CHARTS_USE_NAMESPACE

enum class DevStatus { disconnected, connecting, connected};

class N9918a : public QObject{
	Q_OBJECT
signals:
	void logging(LogLevel level, QString msg);
	void measure_updated(double max_power, double min_power, double max_freq);
	void status_changed(DevStatus deviceOK);

public:
	DevStatus deviceOK;
	QString center_freq;
	QString span_freq;
	QString xaxis_str;
	N9918a();
	~N9918a();
	void connectToN9918a(QString ip_addr);
	void disconnect();
	
	QLineSeries* measure_power(double* power_max);
	void set_continuous_on();   // 测量时会变为单次触发模式, 调用此函数恢复
	void init(QString sample_points, QString start_freq, QString stop_freq);
	QString return_last_measure_data();

private:
	QTelnet telnet;
	bool cmd_lock;  // 命令锁，如果命令是带有？查询语句，需要等待结果返回
	bool measure_lock;  // 测量锁， 测量的时候不知道为啥返回的结果可能被拆成两包
	int measure_data_counter;
	QString last_anser;
	QVector<double>* xaxis;  // x-axis data generated by start stop freq and sample points.
	int sample_points;

	void send_cmd(const QString& cmd);
	void get_freq_linespace();   // 从仪器中获取图像横坐标数据
private slots:
	void on_state_changed(QAbstractSocket::SocketState s);
	void msg_callback(const char* msg, int count);
};

